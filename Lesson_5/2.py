"""
2. Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры
числа. Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и
[‘C’, ‘4’, ‘F’] соответственно. Сумма чисел из примера: [‘C’, ‘F’, ‘1’],
произведение - [‘7’, ‘C’, ‘9’, ‘F’, E].
"""
import collections

# конструктор коллекции - словаря.
hex_number = collections.defaultdict(list)
# определяем будущее количество шестнадцатеричных чисел для использования в цикле
q = 2

# заполняем словарь парами ключ - десятичное число и значение - его шестнадцатеричный эквивалент в виде списка
for i in range(q):
    a = input(f'Hex number {i+1} ')
    hex_number[int(a, 16)] = [f for f in a]

# для определения суммы - суммируем ключи = десятичные эквиваленты summa
summa = hex(sum(hex_number.keys()))



# multiplier

def multip(int_list, counter = 0):
    if counter == len(int_list) -1:
        return int_list[counter]
    else:
        return int_list[counter] * multip(int_list, counter + 1)

# вызываем функцию для вычисления произведения и результат сохраняем в переменную mul
mul = hex(multip(list(hex_number.keys())))

# добавляем сумму в словарь hex_number с ключом "Сумма"
hex_number['Сумма'] = [f.upper() for f in summa[2:]]

# добавляем произведение в словарь hex_number с ключом "Произведение"
hex_number['Произведение'] = [f.upper() for f in mul[2:]]

# выводим словарь
print(hex_number.items())







# ключи уникальны. А в нашем случае они хранят десятичное число. Чтобы можно было складывать и умножать одинаковые
# числа, можно в ключ передавать кортеж, который в свою очередь хранит порядковый номер числа и десятичное значение.
# Обращаться в расчетах к индексу 1 кортежа ключа
