"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. По возможности доработайте алгоритм (сделайте его умнее).
"""
import cProfile
import random

# функция сортировки встроенной функцией Python (для проверки правильности результата)
def sort_array(ar):
    return sorted(ar)

# функция создания списка
def array():
    array = [random.randint(-100, 100) for n in range(50)]
    return array


# функция сортировки списка пузырьком два варианта.
# По результатам - в зависимости о сформированного списка экономия в прогонах.
# Без ограничения - всегда 103 (при заданных параметрах списка -100, 100 в range 50
# С ограничением - чаще всего меньше 90

# 1 - с ограничением по количеству проходов в случае, если изменения уже не вносились

def bubble_sort(arr):
    n = 1
    while n < len(arr):
        counter = 0
        for i in range(len(arr)-n):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                counter += 1
        if counter == 0:
            return arr
        n += 1
    return arr


# без ограничения по количеству проходов в случае, если изменения уже не вносились
def bubble_sort_1(a):
    n = 1
    while n < len(a):
        for i in range(len(a)-n):
            if a[i] > a[i+1]:
                a[i], a[i+1] = a[i+1], a[i]

        n += 1
    return a

# вводим переменную, в которую записываем результат вызова функции создания списка
check = array()




# проверяем на время выполнения функцию сотрировки пузырьком С ограничением проходов
# - если изменения в ряд не вносились
cProfile.run('bubble_sort(check)')




# проверяем на время выполнения функцию сотрировки пузырьком БЕЗ ограничения проходов
# - если изменения в ряд не вносились
cProfile.run('bubble_sort_1(check)')

# проверяем тождество результатов трех функций
print(bubble_sort_1(check) == bubble_sort(check) == sort_array(check))